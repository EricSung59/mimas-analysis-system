#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AnalysisSystem
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DataAcquisition")]
	public partial class AnalysisSystemDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDataPoint(DataPoint instance);
    partial void UpdateDataPoint(DataPoint instance);
    partial void DeleteDataPoint(DataPoint instance);
    partial void InsertVolunteer(Volunteer instance);
    partial void UpdateVolunteer(Volunteer instance);
    partial void DeleteVolunteer(Volunteer instance);
    partial void InsertEEG(EEG instance);
    partial void UpdateEEG(EEG instance);
    partial void DeleteEEG(EEG instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertPicGroup(PicGroup instance);
    partial void UpdatePicGroup(PicGroup instance);
    partial void DeletePicGroup(PicGroup instance);
    partial void InsertPicture(Picture instance);
    partial void UpdatePicture(Picture instance);
    partial void DeletePicture(Picture instance);
    partial void InsertSample(Sample instance);
    partial void UpdateSample(Sample instance);
    partial void DeleteSample(Sample instance);
    partial void InsertVolPic(VolPic instance);
    partial void UpdateVolPic(VolPic instance);
    partial void DeleteVolPic(VolPic instance);
    #endregion
		
		public AnalysisSystemDataContext() : 
				base(global::AnalysisSystem.Properties.Settings.Default.DataAcquisitionConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AnalysisSystemDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AnalysisSystemDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AnalysisSystemDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AnalysisSystemDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DataPoint> DataPoints
		{
			get
			{
				return this.GetTable<DataPoint>();
			}
		}
		
		public System.Data.Linq.Table<Volunteer> Volunteers
		{
			get
			{
				return this.GetTable<Volunteer>();
			}
		}
		
		public System.Data.Linq.Table<EEG> EEGs
		{
			get
			{
				return this.GetTable<EEG>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<PicGroup> PicGroups
		{
			get
			{
				return this.GetTable<PicGroup>();
			}
		}
		
		public System.Data.Linq.Table<Picture> Pictures
		{
			get
			{
				return this.GetTable<Picture>();
			}
		}
		
		public System.Data.Linq.Table<Sample> Samples
		{
			get
			{
				return this.GetTable<Sample>();
			}
		}
		
		public System.Data.Linq.Table<VolPic> VolPics
		{
			get
			{
				return this.GetTable<VolPic>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DataPoint")]
	public partial class DataPoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SID;
		
		private System.Nullable<double> _FdArousal;
		
		private System.Nullable<double> _FdValence;
		
		private string _Label;
		
		private EntityRef<Sample> _Sample;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSIDChanging(string value);
    partial void OnSIDChanged();
    partial void OnFdArousalChanging(System.Nullable<double> value);
    partial void OnFdArousalChanged();
    partial void OnFdValenceChanging(System.Nullable<double> value);
    partial void OnFdValenceChanged();
    partial void OnLabelChanging(string value);
    partial void OnLabelChanged();
    #endregion
		
		public DataPoint()
		{
			this._Sample = default(EntityRef<Sample>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SID
		{
			get
			{
				return this._SID;
			}
			set
			{
				if ((this._SID != value))
				{
					if (this._Sample.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSIDChanging(value);
					this.SendPropertyChanging();
					this._SID = value;
					this.SendPropertyChanged("SID");
					this.OnSIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FdArousal", DbType="Float")]
		public System.Nullable<double> FdArousal
		{
			get
			{
				return this._FdArousal;
			}
			set
			{
				if ((this._FdArousal != value))
				{
					this.OnFdArousalChanging(value);
					this.SendPropertyChanging();
					this._FdArousal = value;
					this.SendPropertyChanged("FdArousal");
					this.OnFdArousalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FdValence", DbType="Float")]
		public System.Nullable<double> FdValence
		{
			get
			{
				return this._FdValence;
			}
			set
			{
				if ((this._FdValence != value))
				{
					this.OnFdValenceChanging(value);
					this.SendPropertyChanging();
					this._FdValence = value;
					this.SendPropertyChanged("FdValence");
					this.OnFdValenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Label", DbType="NVarChar(MAX)")]
		public string Label
		{
			get
			{
				return this._Label;
			}
			set
			{
				if ((this._Label != value))
				{
					this.OnLabelChanging(value);
					this.SendPropertyChanging();
					this._Label = value;
					this.SendPropertyChanged("Label");
					this.OnLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sample_DataPoint", Storage="_Sample", ThisKey="SID", OtherKey="SID", IsForeignKey=true)]
		public Sample Sample
		{
			get
			{
				return this._Sample.Entity;
			}
			set
			{
				Sample previousValue = this._Sample.Entity;
				if (((previousValue != value) 
							|| (this._Sample.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sample.Entity = null;
						previousValue.DataPoint = null;
					}
					this._Sample.Entity = value;
					if ((value != null))
					{
						value.DataPoint = this;
						this._SID = value.SID;
					}
					else
					{
						this._SID = default(string);
					}
					this.SendPropertyChanged("Sample");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Volunteers")]
	public partial class Volunteer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _VID;
		
		private string _Name;
		
		private System.Nullable<int> _Age;
		
		private string _Gender;
		
		private string _Email;
		
		private string _Phone;
		
		private string _Address;
		
		private string _Study;
		
		private string _JobTitle;
		
		private EntitySet<VolPic> _VolPics;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVIDChanging(string value);
    partial void OnVIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAgeChanging(System.Nullable<int> value);
    partial void OnAgeChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnStudyChanging(string value);
    partial void OnStudyChanged();
    partial void OnJobTitleChanging(string value);
    partial void OnJobTitleChanged();
    #endregion
		
		public Volunteer()
		{
			this._VolPics = new EntitySet<VolPic>(new Action<VolPic>(this.attach_VolPics), new Action<VolPic>(this.detach_VolPics));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string VID
		{
			get
			{
				return this._VID;
			}
			set
			{
				if ((this._VID != value))
				{
					this.OnVIDChanging(value);
					this.SendPropertyChanging();
					this._VID = value;
					this.SendPropertyChanged("VID");
					this.OnVIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int")]
		public System.Nullable<int> Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(MAX)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(MAX)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(MAX)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Study", DbType="NVarChar(MAX)")]
		public string Study
		{
			get
			{
				return this._Study;
			}
			set
			{
				if ((this._Study != value))
				{
					this.OnStudyChanging(value);
					this.SendPropertyChanging();
					this._Study = value;
					this.SendPropertyChanged("Study");
					this.OnStudyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobTitle", DbType="NVarChar(MAX)")]
		public string JobTitle
		{
			get
			{
				return this._JobTitle;
			}
			set
			{
				if ((this._JobTitle != value))
				{
					this.OnJobTitleChanging(value);
					this.SendPropertyChanging();
					this._JobTitle = value;
					this.SendPropertyChanged("JobTitle");
					this.OnJobTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Volunteer_VolPic", Storage="_VolPics", ThisKey="VID", OtherKey="VID")]
		public EntitySet<VolPic> VolPics
		{
			get
			{
				return this._VolPics;
			}
			set
			{
				this._VolPics.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VolPics(VolPic entity)
		{
			this.SendPropertyChanging();
			entity.Volunteer = this;
		}
		
		private void detach_VolPics(VolPic entity)
		{
			this.SendPropertyChanging();
			entity.Volunteer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EEG")]
	public partial class EEG : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SID;
		
		private System.Nullable<double> _AF3;
		
		private System.Nullable<double> _F7;
		
		private System.Nullable<double> _F3;
		
		private System.Nullable<double> _FC5;
		
		private System.Nullable<double> _T7;
		
		private System.Nullable<double> _P7;
		
		private System.Nullable<double> _O1;
		
		private System.Nullable<double> _O2;
		
		private System.Nullable<double> _T8;
		
		private System.Nullable<double> _P8;
		
		private System.Nullable<double> _FC6;
		
		private System.Nullable<double> _F4;
		
		private System.Nullable<double> _F8;
		
		private System.Nullable<double> _AF4;
		
		private EntityRef<Sample> _Sample;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSIDChanging(string value);
    partial void OnSIDChanged();
    partial void OnAF3Changing(System.Nullable<double> value);
    partial void OnAF3Changed();
    partial void OnF7Changing(System.Nullable<double> value);
    partial void OnF7Changed();
    partial void OnF3Changing(System.Nullable<double> value);
    partial void OnF3Changed();
    partial void OnFC5Changing(System.Nullable<double> value);
    partial void OnFC5Changed();
    partial void OnT7Changing(System.Nullable<double> value);
    partial void OnT7Changed();
    partial void OnP7Changing(System.Nullable<double> value);
    partial void OnP7Changed();
    partial void OnO1Changing(System.Nullable<double> value);
    partial void OnO1Changed();
    partial void OnO2Changing(System.Nullable<double> value);
    partial void OnO2Changed();
    partial void OnT8Changing(System.Nullable<double> value);
    partial void OnT8Changed();
    partial void OnP8Changing(System.Nullable<double> value);
    partial void OnP8Changed();
    partial void OnFC6Changing(System.Nullable<double> value);
    partial void OnFC6Changed();
    partial void OnF4Changing(System.Nullable<double> value);
    partial void OnF4Changed();
    partial void OnF8Changing(System.Nullable<double> value);
    partial void OnF8Changed();
    partial void OnAF4Changing(System.Nullable<double> value);
    partial void OnAF4Changed();
    #endregion
		
		public EEG()
		{
			this._Sample = default(EntityRef<Sample>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SID
		{
			get
			{
				return this._SID;
			}
			set
			{
				if ((this._SID != value))
				{
					if (this._Sample.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSIDChanging(value);
					this.SendPropertyChanging();
					this._SID = value;
					this.SendPropertyChanged("SID");
					this.OnSIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AF3", DbType="Float")]
		public System.Nullable<double> AF3
		{
			get
			{
				return this._AF3;
			}
			set
			{
				if ((this._AF3 != value))
				{
					this.OnAF3Changing(value);
					this.SendPropertyChanging();
					this._AF3 = value;
					this.SendPropertyChanged("AF3");
					this.OnAF3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_F7", DbType="Float")]
		public System.Nullable<double> F7
		{
			get
			{
				return this._F7;
			}
			set
			{
				if ((this._F7 != value))
				{
					this.OnF7Changing(value);
					this.SendPropertyChanging();
					this._F7 = value;
					this.SendPropertyChanged("F7");
					this.OnF7Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_F3", DbType="Float")]
		public System.Nullable<double> F3
		{
			get
			{
				return this._F3;
			}
			set
			{
				if ((this._F3 != value))
				{
					this.OnF3Changing(value);
					this.SendPropertyChanging();
					this._F3 = value;
					this.SendPropertyChanged("F3");
					this.OnF3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FC5", DbType="Float")]
		public System.Nullable<double> FC5
		{
			get
			{
				return this._FC5;
			}
			set
			{
				if ((this._FC5 != value))
				{
					this.OnFC5Changing(value);
					this.SendPropertyChanging();
					this._FC5 = value;
					this.SendPropertyChanged("FC5");
					this.OnFC5Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_T7", DbType="Float")]
		public System.Nullable<double> T7
		{
			get
			{
				return this._T7;
			}
			set
			{
				if ((this._T7 != value))
				{
					this.OnT7Changing(value);
					this.SendPropertyChanging();
					this._T7 = value;
					this.SendPropertyChanged("T7");
					this.OnT7Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P7", DbType="Float")]
		public System.Nullable<double> P7
		{
			get
			{
				return this._P7;
			}
			set
			{
				if ((this._P7 != value))
				{
					this.OnP7Changing(value);
					this.SendPropertyChanging();
					this._P7 = value;
					this.SendPropertyChanged("P7");
					this.OnP7Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_O1", DbType="Float")]
		public System.Nullable<double> O1
		{
			get
			{
				return this._O1;
			}
			set
			{
				if ((this._O1 != value))
				{
					this.OnO1Changing(value);
					this.SendPropertyChanging();
					this._O1 = value;
					this.SendPropertyChanged("O1");
					this.OnO1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_O2", DbType="Float")]
		public System.Nullable<double> O2
		{
			get
			{
				return this._O2;
			}
			set
			{
				if ((this._O2 != value))
				{
					this.OnO2Changing(value);
					this.SendPropertyChanging();
					this._O2 = value;
					this.SendPropertyChanged("O2");
					this.OnO2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_T8", DbType="Float")]
		public System.Nullable<double> T8
		{
			get
			{
				return this._T8;
			}
			set
			{
				if ((this._T8 != value))
				{
					this.OnT8Changing(value);
					this.SendPropertyChanging();
					this._T8 = value;
					this.SendPropertyChanged("T8");
					this.OnT8Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P8", DbType="Float")]
		public System.Nullable<double> P8
		{
			get
			{
				return this._P8;
			}
			set
			{
				if ((this._P8 != value))
				{
					this.OnP8Changing(value);
					this.SendPropertyChanging();
					this._P8 = value;
					this.SendPropertyChanged("P8");
					this.OnP8Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FC6", DbType="Float")]
		public System.Nullable<double> FC6
		{
			get
			{
				return this._FC6;
			}
			set
			{
				if ((this._FC6 != value))
				{
					this.OnFC6Changing(value);
					this.SendPropertyChanging();
					this._FC6 = value;
					this.SendPropertyChanged("FC6");
					this.OnFC6Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_F4", DbType="Float")]
		public System.Nullable<double> F4
		{
			get
			{
				return this._F4;
			}
			set
			{
				if ((this._F4 != value))
				{
					this.OnF4Changing(value);
					this.SendPropertyChanging();
					this._F4 = value;
					this.SendPropertyChanged("F4");
					this.OnF4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_F8", DbType="Float")]
		public System.Nullable<double> F8
		{
			get
			{
				return this._F8;
			}
			set
			{
				if ((this._F8 != value))
				{
					this.OnF8Changing(value);
					this.SendPropertyChanging();
					this._F8 = value;
					this.SendPropertyChanged("F8");
					this.OnF8Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AF4", DbType="Float")]
		public System.Nullable<double> AF4
		{
			get
			{
				return this._AF4;
			}
			set
			{
				if ((this._AF4 != value))
				{
					this.OnAF4Changing(value);
					this.SendPropertyChanging();
					this._AF4 = value;
					this.SendPropertyChanged("AF4");
					this.OnAF4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sample_EEG", Storage="_Sample", ThisKey="SID", OtherKey="SID", IsForeignKey=true)]
		public Sample Sample
		{
			get
			{
				return this._Sample.Entity;
			}
			set
			{
				Sample previousValue = this._Sample.Entity;
				if (((previousValue != value) 
							|| (this._Sample.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sample.Entity = null;
						previousValue.EEG = null;
					}
					this._Sample.Entity = value;
					if ((value != null))
					{
						value.EEG = this;
						this._SID = value.SID;
					}
					else
					{
						this._SID = default(string);
					}
					this.SendPropertyChanged("Sample");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Groups")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _GID;
		
		private string _Name;
		
		private string _Path;
		
		private EntitySet<PicGroup> _PicGroups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGIDChanging(string value);
    partial void OnGIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    #endregion
		
		public Group()
		{
			this._PicGroups = new EntitySet<PicGroup>(new Action<PicGroup>(this.attach_PicGroups), new Action<PicGroup>(this.detach_PicGroups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string GID
		{
			get
			{
				return this._GID;
			}
			set
			{
				if ((this._GID != value))
				{
					this.OnGIDChanging(value);
					this.SendPropertyChanging();
					this._GID = value;
					this.SendPropertyChanged("GID");
					this.OnGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="NVarChar(MAX)")]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_PicGroup", Storage="_PicGroups", ThisKey="GID", OtherKey="GID")]
		public EntitySet<PicGroup> PicGroups
		{
			get
			{
				return this._PicGroups;
			}
			set
			{
				this._PicGroups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PicGroups(PicGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_PicGroups(PicGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PicGroups")]
	public partial class PicGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PID;
		
		private string _GID;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<Picture> _Picture;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPIDChanging(string value);
    partial void OnPIDChanged();
    partial void OnGIDChanging(string value);
    partial void OnGIDChanged();
    #endregion
		
		public PicGroup()
		{
			this._Group = default(EntityRef<Group>);
			this._Picture = default(EntityRef<Picture>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PID
		{
			get
			{
				return this._PID;
			}
			set
			{
				if ((this._PID != value))
				{
					if (this._Picture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPIDChanging(value);
					this.SendPropertyChanging();
					this._PID = value;
					this.SendPropertyChanged("PID");
					this.OnPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string GID
		{
			get
			{
				return this._GID;
			}
			set
			{
				if ((this._GID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGIDChanging(value);
					this.SendPropertyChanging();
					this._GID = value;
					this.SendPropertyChanged("GID");
					this.OnGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_PicGroup", Storage="_Group", ThisKey="GID", OtherKey="GID", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.PicGroups.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.PicGroups.Add(this);
						this._GID = value.GID;
					}
					else
					{
						this._GID = default(string);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Picture_PicGroup", Storage="_Picture", ThisKey="PID", OtherKey="PID", IsForeignKey=true)]
		public Picture Picture
		{
			get
			{
				return this._Picture.Entity;
			}
			set
			{
				Picture previousValue = this._Picture.Entity;
				if (((previousValue != value) 
							|| (this._Picture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Picture.Entity = null;
						previousValue.PicGroups.Remove(this);
					}
					this._Picture.Entity = value;
					if ((value != null))
					{
						value.PicGroups.Add(this);
						this._PID = value.PID;
					}
					else
					{
						this._PID = default(string);
					}
					this.SendPropertyChanged("Picture");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pictures")]
	public partial class Picture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PID;
		
		private string _Name;
		
		private System.Nullable<double> _Arousal;
		
		private System.Nullable<double> _Valence;
		
		private System.Nullable<double> _ArousalSD;
		
		private System.Nullable<double> _ValenceSD;
		
		private EntitySet<PicGroup> _PicGroups;
		
		private EntitySet<VolPic> _VolPics;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPIDChanging(string value);
    partial void OnPIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnArousalChanging(System.Nullable<double> value);
    partial void OnArousalChanged();
    partial void OnValenceChanging(System.Nullable<double> value);
    partial void OnValenceChanged();
    partial void OnArousalSDChanging(System.Nullable<double> value);
    partial void OnArousalSDChanged();
    partial void OnValenceSDChanging(System.Nullable<double> value);
    partial void OnValenceSDChanged();
    #endregion
		
		public Picture()
		{
			this._PicGroups = new EntitySet<PicGroup>(new Action<PicGroup>(this.attach_PicGroups), new Action<PicGroup>(this.detach_PicGroups));
			this._VolPics = new EntitySet<VolPic>(new Action<VolPic>(this.attach_VolPics), new Action<VolPic>(this.detach_VolPics));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PID
		{
			get
			{
				return this._PID;
			}
			set
			{
				if ((this._PID != value))
				{
					this.OnPIDChanging(value);
					this.SendPropertyChanging();
					this._PID = value;
					this.SendPropertyChanged("PID");
					this.OnPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Arousal", DbType="Float")]
		public System.Nullable<double> Arousal
		{
			get
			{
				return this._Arousal;
			}
			set
			{
				if ((this._Arousal != value))
				{
					this.OnArousalChanging(value);
					this.SendPropertyChanging();
					this._Arousal = value;
					this.SendPropertyChanged("Arousal");
					this.OnArousalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Valence", DbType="Float")]
		public System.Nullable<double> Valence
		{
			get
			{
				return this._Valence;
			}
			set
			{
				if ((this._Valence != value))
				{
					this.OnValenceChanging(value);
					this.SendPropertyChanging();
					this._Valence = value;
					this.SendPropertyChanged("Valence");
					this.OnValenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArousalSD", DbType="Float")]
		public System.Nullable<double> ArousalSD
		{
			get
			{
				return this._ArousalSD;
			}
			set
			{
				if ((this._ArousalSD != value))
				{
					this.OnArousalSDChanging(value);
					this.SendPropertyChanging();
					this._ArousalSD = value;
					this.SendPropertyChanged("ArousalSD");
					this.OnArousalSDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValenceSD", DbType="Float")]
		public System.Nullable<double> ValenceSD
		{
			get
			{
				return this._ValenceSD;
			}
			set
			{
				if ((this._ValenceSD != value))
				{
					this.OnValenceSDChanging(value);
					this.SendPropertyChanging();
					this._ValenceSD = value;
					this.SendPropertyChanged("ValenceSD");
					this.OnValenceSDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Picture_PicGroup", Storage="_PicGroups", ThisKey="PID", OtherKey="PID")]
		public EntitySet<PicGroup> PicGroups
		{
			get
			{
				return this._PicGroups;
			}
			set
			{
				this._PicGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Picture_VolPic", Storage="_VolPics", ThisKey="PID", OtherKey="PID")]
		public EntitySet<VolPic> VolPics
		{
			get
			{
				return this._VolPics;
			}
			set
			{
				this._VolPics.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PicGroups(PicGroup entity)
		{
			this.SendPropertyChanging();
			entity.Picture = this;
		}
		
		private void detach_PicGroups(PicGroup entity)
		{
			this.SendPropertyChanging();
			entity.Picture = null;
		}
		
		private void attach_VolPics(VolPic entity)
		{
			this.SendPropertyChanging();
			entity.Picture = this;
		}
		
		private void detach_VolPics(VolPic entity)
		{
			this.SendPropertyChanging();
			entity.Picture = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Samples")]
	public partial class Sample : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SID;
		
		private string _EdfPath;
		
		private string _DataCsvPath;
		
		private System.Nullable<double> _SamArousal;
		
		private System.Nullable<double> _SamValence;
		
		private string _AffectionLabel;
		
		private System.Nullable<bool> _IsGood;
		
		private string _HfdCsvPath;
		
		private EntityRef<DataPoint> _DataPoint;
		
		private EntityRef<EEG> _EEG;
		
		private EntitySet<VolPic> _VolPics;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSIDChanging(string value);
    partial void OnSIDChanged();
    partial void OnEdfPathChanging(string value);
    partial void OnEdfPathChanged();
    partial void OnDataCsvPathChanging(string value);
    partial void OnDataCsvPathChanged();
    partial void OnSamArousalChanging(System.Nullable<double> value);
    partial void OnSamArousalChanged();
    partial void OnSamValenceChanging(System.Nullable<double> value);
    partial void OnSamValenceChanged();
    partial void OnAffectionLabelChanging(string value);
    partial void OnAffectionLabelChanged();
    partial void OnIsGoodChanging(System.Nullable<bool> value);
    partial void OnIsGoodChanged();
    partial void OnHfdCsvPathChanging(string value);
    partial void OnHfdCsvPathChanged();
    #endregion
		
		public Sample()
		{
			this._DataPoint = default(EntityRef<DataPoint>);
			this._EEG = default(EntityRef<EEG>);
			this._VolPics = new EntitySet<VolPic>(new Action<VolPic>(this.attach_VolPics), new Action<VolPic>(this.detach_VolPics));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SID
		{
			get
			{
				return this._SID;
			}
			set
			{
				if ((this._SID != value))
				{
					this.OnSIDChanging(value);
					this.SendPropertyChanging();
					this._SID = value;
					this.SendPropertyChanged("SID");
					this.OnSIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EdfPath", DbType="NVarChar(MAX)")]
		public string EdfPath
		{
			get
			{
				return this._EdfPath;
			}
			set
			{
				if ((this._EdfPath != value))
				{
					this.OnEdfPathChanging(value);
					this.SendPropertyChanging();
					this._EdfPath = value;
					this.SendPropertyChanged("EdfPath");
					this.OnEdfPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataCsvPath", DbType="NVarChar(MAX)")]
		public string DataCsvPath
		{
			get
			{
				return this._DataCsvPath;
			}
			set
			{
				if ((this._DataCsvPath != value))
				{
					this.OnDataCsvPathChanging(value);
					this.SendPropertyChanging();
					this._DataCsvPath = value;
					this.SendPropertyChanged("DataCsvPath");
					this.OnDataCsvPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SamArousal", DbType="Float")]
		public System.Nullable<double> SamArousal
		{
			get
			{
				return this._SamArousal;
			}
			set
			{
				if ((this._SamArousal != value))
				{
					this.OnSamArousalChanging(value);
					this.SendPropertyChanging();
					this._SamArousal = value;
					this.SendPropertyChanged("SamArousal");
					this.OnSamArousalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SamValence", DbType="Float")]
		public System.Nullable<double> SamValence
		{
			get
			{
				return this._SamValence;
			}
			set
			{
				if ((this._SamValence != value))
				{
					this.OnSamValenceChanging(value);
					this.SendPropertyChanging();
					this._SamValence = value;
					this.SendPropertyChanged("SamValence");
					this.OnSamValenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AffectionLabel", DbType="NVarChar(MAX)")]
		public string AffectionLabel
		{
			get
			{
				return this._AffectionLabel;
			}
			set
			{
				if ((this._AffectionLabel != value))
				{
					this.OnAffectionLabelChanging(value);
					this.SendPropertyChanging();
					this._AffectionLabel = value;
					this.SendPropertyChanged("AffectionLabel");
					this.OnAffectionLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsGood", DbType="Bit")]
		public System.Nullable<bool> IsGood
		{
			get
			{
				return this._IsGood;
			}
			set
			{
				if ((this._IsGood != value))
				{
					this.OnIsGoodChanging(value);
					this.SendPropertyChanging();
					this._IsGood = value;
					this.SendPropertyChanged("IsGood");
					this.OnIsGoodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HfdCsvPath", DbType="NVarChar(MAX)")]
		public string HfdCsvPath
		{
			get
			{
				return this._HfdCsvPath;
			}
			set
			{
				if ((this._HfdCsvPath != value))
				{
					this.OnHfdCsvPathChanging(value);
					this.SendPropertyChanging();
					this._HfdCsvPath = value;
					this.SendPropertyChanged("HfdCsvPath");
					this.OnHfdCsvPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sample_DataPoint", Storage="_DataPoint", ThisKey="SID", OtherKey="SID", IsUnique=true, IsForeignKey=false)]
		public DataPoint DataPoint
		{
			get
			{
				return this._DataPoint.Entity;
			}
			set
			{
				DataPoint previousValue = this._DataPoint.Entity;
				if (((previousValue != value) 
							|| (this._DataPoint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataPoint.Entity = null;
						previousValue.Sample = null;
					}
					this._DataPoint.Entity = value;
					if ((value != null))
					{
						value.Sample = this;
					}
					this.SendPropertyChanged("DataPoint");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sample_EEG", Storage="_EEG", ThisKey="SID", OtherKey="SID", IsUnique=true, IsForeignKey=false)]
		public EEG EEG
		{
			get
			{
				return this._EEG.Entity;
			}
			set
			{
				EEG previousValue = this._EEG.Entity;
				if (((previousValue != value) 
							|| (this._EEG.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EEG.Entity = null;
						previousValue.Sample = null;
					}
					this._EEG.Entity = value;
					if ((value != null))
					{
						value.Sample = this;
					}
					this.SendPropertyChanged("EEG");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sample_VolPic", Storage="_VolPics", ThisKey="SID", OtherKey="SID")]
		public EntitySet<VolPic> VolPics
		{
			get
			{
				return this._VolPics;
			}
			set
			{
				this._VolPics.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VolPics(VolPic entity)
		{
			this.SendPropertyChanging();
			entity.Sample = this;
		}
		
		private void detach_VolPics(VolPic entity)
		{
			this.SendPropertyChanging();
			entity.Sample = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VolPics")]
	public partial class VolPic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _VID;
		
		private string _PID;
		
		private string _SID;
		
		private EntityRef<Picture> _Picture;
		
		private EntityRef<Sample> _Sample;
		
		private EntityRef<Volunteer> _Volunteer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVIDChanging(string value);
    partial void OnVIDChanged();
    partial void OnPIDChanging(string value);
    partial void OnPIDChanged();
    partial void OnSIDChanging(string value);
    partial void OnSIDChanged();
    #endregion
		
		public VolPic()
		{
			this._Picture = default(EntityRef<Picture>);
			this._Sample = default(EntityRef<Sample>);
			this._Volunteer = default(EntityRef<Volunteer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string VID
		{
			get
			{
				return this._VID;
			}
			set
			{
				if ((this._VID != value))
				{
					if (this._Volunteer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVIDChanging(value);
					this.SendPropertyChanging();
					this._VID = value;
					this.SendPropertyChanged("VID");
					this.OnVIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PID
		{
			get
			{
				return this._PID;
			}
			set
			{
				if ((this._PID != value))
				{
					if (this._Picture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPIDChanging(value);
					this.SendPropertyChanging();
					this._PID = value;
					this.SendPropertyChanged("PID");
					this.OnPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SID
		{
			get
			{
				return this._SID;
			}
			set
			{
				if ((this._SID != value))
				{
					if (this._Sample.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSIDChanging(value);
					this.SendPropertyChanging();
					this._SID = value;
					this.SendPropertyChanged("SID");
					this.OnSIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Picture_VolPic", Storage="_Picture", ThisKey="PID", OtherKey="PID", IsForeignKey=true)]
		public Picture Picture
		{
			get
			{
				return this._Picture.Entity;
			}
			set
			{
				Picture previousValue = this._Picture.Entity;
				if (((previousValue != value) 
							|| (this._Picture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Picture.Entity = null;
						previousValue.VolPics.Remove(this);
					}
					this._Picture.Entity = value;
					if ((value != null))
					{
						value.VolPics.Add(this);
						this._PID = value.PID;
					}
					else
					{
						this._PID = default(string);
					}
					this.SendPropertyChanged("Picture");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sample_VolPic", Storage="_Sample", ThisKey="SID", OtherKey="SID", IsForeignKey=true)]
		public Sample Sample
		{
			get
			{
				return this._Sample.Entity;
			}
			set
			{
				Sample previousValue = this._Sample.Entity;
				if (((previousValue != value) 
							|| (this._Sample.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sample.Entity = null;
						previousValue.VolPics.Remove(this);
					}
					this._Sample.Entity = value;
					if ((value != null))
					{
						value.VolPics.Add(this);
						this._SID = value.SID;
					}
					else
					{
						this._SID = default(string);
					}
					this.SendPropertyChanged("Sample");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Volunteer_VolPic", Storage="_Volunteer", ThisKey="VID", OtherKey="VID", IsForeignKey=true)]
		public Volunteer Volunteer
		{
			get
			{
				return this._Volunteer.Entity;
			}
			set
			{
				Volunteer previousValue = this._Volunteer.Entity;
				if (((previousValue != value) 
							|| (this._Volunteer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Volunteer.Entity = null;
						previousValue.VolPics.Remove(this);
					}
					this._Volunteer.Entity = value;
					if ((value != null))
					{
						value.VolPics.Add(this);
						this._VID = value.VID;
					}
					else
					{
						this._VID = default(string);
					}
					this.SendPropertyChanged("Volunteer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
